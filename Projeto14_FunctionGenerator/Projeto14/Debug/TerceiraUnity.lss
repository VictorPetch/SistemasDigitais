
TerceiraUnity.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000006f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000069e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000006f2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000724  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000764  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000094f  00000000  00000000  000007ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000771  00000000  00000000  000010fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003fd  00000000  00000000  0000186c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  00001c6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000402  00000000  00000000  00001d04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000028f  00000000  00000000  00002106  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00002395  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 43 00 	jmp	0x86	; 0x86 <__ctors_end>
   4:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
   8:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
   c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  10:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  14:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  18:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  1c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  20:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  24:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  28:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  2c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  30:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  34:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  38:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  3c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  40:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  44:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  48:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  4c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  50:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  54:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  58:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  5c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  60:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  64:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  68:	05 a8       	ldd	r0, Z+53	; 0x35
  6a:	4c cd       	rjmp	.-1384   	; 0xfffffb04 <__eeprom_end+0xff7efb04>
  6c:	b2 d4       	rcall	.+2404   	; 0x9d2 <__stack+0xd3>
  6e:	4e b9       	out	0x0e, r20	; 14
  70:	38 36       	cpi	r19, 0x68	; 104
  72:	a9 02       	muls	r26, r25
  74:	0c 50       	subi	r16, 0x0C	; 12
  76:	b9 91       	ld	r27, Y+
  78:	86 88       	ldd	r8, Z+22	; 0x16
  7a:	08 3c       	cpi	r16, 0xC8	; 200
  7c:	a6 aa       	std	Z+54, r10	; 0x36
  7e:	aa 2a       	or	r10, r26
  80:	be 00       	.word	0x00be	; ????
  82:	00 00       	nop
  84:	80 3f       	cpi	r24, 0xF0	; 240

00000086 <__ctors_end>:
  86:	11 24       	eor	r1, r1
  88:	1f be       	out	0x3f, r1	; 63
  8a:	cf ef       	ldi	r28, 0xFF	; 255
  8c:	d8 e0       	ldi	r29, 0x08	; 8
  8e:	de bf       	out	0x3e, r29	; 62
  90:	cd bf       	out	0x3d, r28	; 61
  92:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <main>
  96:	0c 94 4d 03 	jmp	0x69a	; 0x69a <_exit>

0000009a <__bad_interrupt>:
  9a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009e <triangular>:
#define F_CPU 16000000
#define PI 3.14259265
#define freq = 30
#include <util/delay.h>
void triangular(){
	for(int n =0; n < 255; n++){
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	90 e0       	ldi	r25, 0x00	; 0
		PORTD = n << 2;
  a2:	28 2f       	mov	r18, r24
  a4:	22 0f       	add	r18, r18
  a6:	22 0f       	add	r18, r18
  a8:	2b b9       	out	0x0b, r18	; 11
		PORTB = n >> 6;
  aa:	9c 01       	movw	r18, r24
  ac:	02 2e       	mov	r0, r18
  ae:	23 2f       	mov	r18, r19
  b0:	00 0c       	add	r0, r0
  b2:	22 1f       	adc	r18, r18
  b4:	33 0b       	sbc	r19, r19
  b6:	00 0c       	add	r0, r0
  b8:	22 1f       	adc	r18, r18
  ba:	33 1f       	adc	r19, r19
  bc:	25 b9       	out	0x05, r18	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	ef e8       	ldi	r30, 0x8F	; 143
  c0:	f1 e0       	ldi	r31, 0x01	; 1
  c2:	31 97       	sbiw	r30, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <triangular+0x24>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <triangular+0x2a>
  c8:	00 00       	nop
#define F_CPU 16000000
#define PI 3.14259265
#define freq = 30
#include <util/delay.h>
void triangular(){
	for(int n =0; n < 255; n++){
  ca:	01 96       	adiw	r24, 0x01	; 1
  cc:	8f 3f       	cpi	r24, 0xFF	; 255
  ce:	91 05       	cpc	r25, r1
  d0:	41 f7       	brne	.-48     	; 0xa2 <triangular+0x4>
  d2:	8f ef       	ldi	r24, 0xFF	; 255
  d4:	90 e0       	ldi	r25, 0x00	; 0
		PORTD = n << 2;
		PORTB = n >> 6;
		_delay_ms(0.1);
	}
	for(int n =255; n >=0; n--){
		PORTD = n << 2;
  d6:	28 2f       	mov	r18, r24
  d8:	22 0f       	add	r18, r18
  da:	22 0f       	add	r18, r18
  dc:	2b b9       	out	0x0b, r18	; 11
		PORTB = n >> 6;
  de:	9c 01       	movw	r18, r24
  e0:	02 2e       	mov	r0, r18
  e2:	23 2f       	mov	r18, r19
  e4:	00 0c       	add	r0, r0
  e6:	22 1f       	adc	r18, r18
  e8:	33 0b       	sbc	r19, r19
  ea:	00 0c       	add	r0, r0
  ec:	22 1f       	adc	r18, r18
  ee:	33 1f       	adc	r19, r19
  f0:	25 b9       	out	0x05, r18	; 5
  f2:	ef e8       	ldi	r30, 0x8F	; 143
  f4:	f1 e0       	ldi	r31, 0x01	; 1
  f6:	31 97       	sbiw	r30, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <triangular+0x58>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <triangular+0x5e>
  fc:	00 00       	nop
	for(int n =0; n < 255; n++){
		PORTD = n << 2;
		PORTB = n >> 6;
		_delay_ms(0.1);
	}
	for(int n =255; n >=0; n--){
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	50 f7       	brcc	.-44     	; 0xd6 <triangular+0x38>
		PORTD = n << 2;
		PORTB = n >> 6;
		_delay_ms(0.1);
		
	}	
}
 102:	08 95       	ret

00000104 <squared>:
void squared(){
	PORTD = 0xFF;
 104:	8f ef       	ldi	r24, 0xFF	; 255
 106:	8b b9       	out	0x0b, r24	; 11
	PORTB = 0xFF;
 108:	85 b9       	out	0x05, r24	; 5
 10a:	2f ef       	ldi	r18, 0xFF	; 255
 10c:	81 ee       	ldi	r24, 0xE1	; 225
 10e:	94 e0       	ldi	r25, 0x04	; 4
 110:	21 50       	subi	r18, 0x01	; 1
 112:	80 40       	sbci	r24, 0x00	; 0
 114:	90 40       	sbci	r25, 0x00	; 0
 116:	e1 f7       	brne	.-8      	; 0x110 <squared+0xc>
 118:	00 c0       	rjmp	.+0      	; 0x11a <squared+0x16>
 11a:	00 00       	nop
	_delay_ms(100);
	PORTD ^= 0xFF;
 11c:	8b b1       	in	r24, 0x0b	; 11
 11e:	80 95       	com	r24
 120:	8b b9       	out	0x0b, r24	; 11
	PORTB ^= 0xFF;
 122:	85 b1       	in	r24, 0x05	; 5
 124:	80 95       	com	r24
 126:	85 b9       	out	0x05, r24	; 5
 128:	2f ef       	ldi	r18, 0xFF	; 255
 12a:	81 ee       	ldi	r24, 0xE1	; 225
 12c:	94 e0       	ldi	r25, 0x04	; 4
 12e:	21 50       	subi	r18, 0x01	; 1
 130:	80 40       	sbci	r24, 0x00	; 0
 132:	90 40       	sbci	r25, 0x00	; 0
 134:	e1 f7       	brne	.-8      	; 0x12e <squared+0x2a>
 136:	00 c0       	rjmp	.+0      	; 0x138 <squared+0x34>
 138:	00 00       	nop
 13a:	08 95       	ret

0000013c <seno>:
	_delay_ms(100);	
	
}
void seno(){
 13c:	cf 92       	push	r12
 13e:	df 92       	push	r13
 140:	ef 92       	push	r14
 142:	ff 92       	push	r15
	double n=0;
 144:	c1 2c       	mov	r12, r1
 146:	d1 2c       	mov	r13, r1
 148:	76 01       	movw	r14, r12
	while(n<255){
		int temp = sin(n)*127+127;
 14a:	c7 01       	movw	r24, r14
 14c:	b6 01       	movw	r22, r12
 14e:	0e 94 bd 02 	call	0x57a	; 0x57a <sin>
 152:	20 e0       	ldi	r18, 0x00	; 0
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	4e ef       	ldi	r20, 0xFE	; 254
 158:	52 e4       	ldi	r21, 0x42	; 66
 15a:	0e 94 50 02 	call	0x4a0	; 0x4a0 <__mulsf3>
 15e:	20 e0       	ldi	r18, 0x00	; 0
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	4e ef       	ldi	r20, 0xFE	; 254
 164:	52 e4       	ldi	r21, 0x42	; 66
 166:	0e 94 2f 01 	call	0x25e	; 0x25e <__addsf3>
 16a:	0e 94 a0 01 	call	0x340	; 0x340 <__fixsfsi>
		PORTD = temp << 2;
 16e:	26 2f       	mov	r18, r22
 170:	22 0f       	add	r18, r18
 172:	22 0f       	add	r18, r18
 174:	2b b9       	out	0x0b, r18	; 11
		PORTB = temp >> 6;	
 176:	06 2e       	mov	r0, r22
 178:	67 2f       	mov	r22, r23
 17a:	00 0c       	add	r0, r0
 17c:	66 1f       	adc	r22, r22
 17e:	77 0b       	sbc	r23, r23
 180:	00 0c       	add	r0, r0
 182:	66 1f       	adc	r22, r22
 184:	77 1f       	adc	r23, r23
 186:	65 b9       	out	0x05, r22	; 5
		n+=0.1;	
 188:	2d ec       	ldi	r18, 0xCD	; 205
 18a:	3c ec       	ldi	r19, 0xCC	; 204
 18c:	4c ec       	ldi	r20, 0xCC	; 204
 18e:	5d e3       	ldi	r21, 0x3D	; 61
 190:	c7 01       	movw	r24, r14
 192:	b6 01       	movw	r22, r12
 194:	0e 94 2f 01 	call	0x25e	; 0x25e <__addsf3>
 198:	6b 01       	movw	r12, r22
 19a:	7c 01       	movw	r14, r24
	_delay_ms(100);	
	
}
void seno(){
	double n=0;
	while(n<255){
 19c:	20 e0       	ldi	r18, 0x00	; 0
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	4f e7       	ldi	r20, 0x7F	; 127
 1a2:	53 e4       	ldi	r21, 0x43	; 67
 1a4:	0e 94 9b 01 	call	0x336	; 0x336 <__cmpsf2>
 1a8:	88 23       	and	r24, r24
 1aa:	7c f2       	brlt	.-98     	; 0x14a <seno+0xe>
		n+=0.1;	
	}

	
	
}	
 1ac:	ff 90       	pop	r15
 1ae:	ef 90       	pop	r14
 1b0:	df 90       	pop	r13
 1b2:	cf 90       	pop	r12
 1b4:	08 95       	ret

000001b6 <ADC_Conversion>:
int ADC_Conversion(int A_i){
	unsigned char adcOut;
	if (A_i == 1) ADMUX |= (1<<MUX0);
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	31 f4       	brne	.+12     	; 0x1c6 <ADC_Conversion+0x10>
 1ba:	ec e7       	ldi	r30, 0x7C	; 124
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	80 81       	ld	r24, Z
 1c0:	81 60       	ori	r24, 0x01	; 1
 1c2:	80 83       	st	Z, r24
 1c4:	05 c0       	rjmp	.+10     	; 0x1d0 <ADC_Conversion+0x1a>
	else ADMUX &= ~(1<<MUX0);
 1c6:	ec e7       	ldi	r30, 0x7C	; 124
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	80 81       	ld	r24, Z
 1cc:	8e 7f       	andi	r24, 0xFE	; 254
 1ce:	80 83       	st	Z, r24
		
	// Start conversion by setting ADSC in ADCSRA Register
	ADCSRA |= (1<<ADSC);
 1d0:	ea e7       	ldi	r30, 0x7A	; 122
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	80 64       	ori	r24, 0x40	; 64
 1d8:	80 83       	st	Z, r24
	// wait until conversion complete ADSC=0 -> Complete
	while (ADCSRA & (1<<ADSC));
 1da:	80 81       	ld	r24, Z
 1dc:	86 fd       	sbrc	r24, 6
 1de:	fd cf       	rjmp	.-6      	; 0x1da <ADC_Conversion+0x24>
	adcOut = ADCH;
 1e0:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	return adcOut;
	
}
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	08 95       	ret

000001e8 <ADC_init>:
void ADC_init(){
	  // Set ADCSRA Register in ATMega168
	  ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
 1e8:	87 e8       	ldi	r24, 0x87	; 135
 1ea:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	  // Set ADMUX Register in ATMega168
	  ADMUX = (1<<REFS0) | (1<<ADLAR);	
 1ee:	80 e6       	ldi	r24, 0x60	; 96
 1f0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 1f4:	08 95       	ret

000001f6 <main>:
#define F_CPU 16000000
#include <util/delay.h>
#include "Project14.h"

int main(void)
{
 1f6:	cf 93       	push	r28
 1f8:	df 93       	push	r29
 1fa:	00 d0       	rcall	.+0      	; 0x1fc <main+0x6>
 1fc:	00 d0       	rcall	.+0      	; 0x1fe <main+0x8>
 1fe:	cd b7       	in	r28, 0x3d	; 61
 200:	de b7       	in	r29, 0x3e	; 62
	// set all PORTD PORTB pins for output
	DDRD = 0xFF;
 202:	8f ef       	ldi	r24, 0xFF	; 255
 204:	8a b9       	out	0x0a, r24	; 10
	DDRB = (1 << DDB0) | (1 << DDB1);
 206:	83 e0       	ldi	r24, 0x03	; 3
 208:	84 b9       	out	0x04, r24	; 4
	// clear everything
	PORTD = 0x00;
 20a:	1b b8       	out	0x0b, r1	; 11
	PORTB = (0 << PORTB0) | (0 << PORTB1);
 20c:	15 b8       	out	0x05, r1	; 5
	ADC_init();
 20e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <ADC_init>
	volatile double n;
	while(1) {
		if(n > 666) n= 0;
 212:	69 81       	ldd	r22, Y+1	; 0x01
 214:	7a 81       	ldd	r23, Y+2	; 0x02
 216:	8b 81       	ldd	r24, Y+3	; 0x03
 218:	9c 81       	ldd	r25, Y+4	; 0x04
 21a:	20 e0       	ldi	r18, 0x00	; 0
 21c:	30 e8       	ldi	r19, 0x80	; 128
 21e:	46 e2       	ldi	r20, 0x26	; 38
 220:	54 e4       	ldi	r21, 0x44	; 68
 222:	0e 94 4b 02 	call	0x496	; 0x496 <__gesf2>
 226:	18 16       	cp	r1, r24
 228:	24 f4       	brge	.+8      	; 0x232 <main+0x3c>
 22a:	19 82       	std	Y+1, r1	; 0x01
 22c:	1a 82       	std	Y+2, r1	; 0x02
 22e:	1b 82       	std	Y+3, r1	; 0x03
 230:	1c 82       	std	Y+4, r1	; 0x04
		unsigned char ADC_out;
		ADC_out = ADC_Conversion(1);
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	0e 94 db 00 	call	0x1b6	; 0x1b6 <ADC_Conversion>
		if(ADC_out > 200 ){
 23a:	89 3c       	cpi	r24, 0xC9	; 201
 23c:	18 f0       	brcs	.+6      	; 0x244 <main+0x4e>
			triangular();	
 23e:	0e 94 4f 00 	call	0x9e	; 0x9e <triangular>
 242:	e7 cf       	rjmp	.-50     	; 0x212 <main+0x1c>
		}
		else{
			ADC_out = ADC_Conversion(0);
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	0e 94 db 00 	call	0x1b6	; 0x1b6 <ADC_Conversion>
			if(ADC_out > 200 ){
 24c:	89 3c       	cpi	r24, 0xC9	; 201
 24e:	18 f0       	brcs	.+6      	; 0x256 <main+0x60>
				squared();
 250:	0e 94 82 00 	call	0x104	; 0x104 <squared>
 254:	de cf       	rjmp	.-68     	; 0x212 <main+0x1c>

			}
			else {
				seno();
 256:	0e 94 9e 00 	call	0x13c	; 0x13c <seno>
 25a:	db cf       	rjmp	.-74     	; 0x212 <main+0x1c>

0000025c <__subsf3>:
 25c:	50 58       	subi	r21, 0x80	; 128

0000025e <__addsf3>:
 25e:	bb 27       	eor	r27, r27
 260:	aa 27       	eor	r26, r26
 262:	0e 94 46 01 	call	0x28c	; 0x28c <__addsf3x>
 266:	0c 94 11 02 	jmp	0x422	; 0x422 <__fp_round>
 26a:	0e 94 03 02 	call	0x406	; 0x406 <__fp_pscA>
 26e:	38 f0       	brcs	.+14     	; 0x27e <__addsf3+0x20>
 270:	0e 94 0a 02 	call	0x414	; 0x414 <__fp_pscB>
 274:	20 f0       	brcs	.+8      	; 0x27e <__addsf3+0x20>
 276:	39 f4       	brne	.+14     	; 0x286 <__addsf3+0x28>
 278:	9f 3f       	cpi	r25, 0xFF	; 255
 27a:	19 f4       	brne	.+6      	; 0x282 <__addsf3+0x24>
 27c:	26 f4       	brtc	.+8      	; 0x286 <__addsf3+0x28>
 27e:	0c 94 00 02 	jmp	0x400	; 0x400 <__fp_nan>
 282:	0e f4       	brtc	.+2      	; 0x286 <__addsf3+0x28>
 284:	e0 95       	com	r30
 286:	e7 fb       	bst	r30, 7
 288:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <__fp_inf>

0000028c <__addsf3x>:
 28c:	e9 2f       	mov	r30, r25
 28e:	0e 94 22 02 	call	0x444	; 0x444 <__fp_split3>
 292:	58 f3       	brcs	.-42     	; 0x26a <__addsf3+0xc>
 294:	ba 17       	cp	r27, r26
 296:	62 07       	cpc	r22, r18
 298:	73 07       	cpc	r23, r19
 29a:	84 07       	cpc	r24, r20
 29c:	95 07       	cpc	r25, r21
 29e:	20 f0       	brcs	.+8      	; 0x2a8 <__addsf3x+0x1c>
 2a0:	79 f4       	brne	.+30     	; 0x2c0 <__addsf3x+0x34>
 2a2:	a6 f5       	brtc	.+104    	; 0x30c <__addsf3x+0x80>
 2a4:	0c 94 44 02 	jmp	0x488	; 0x488 <__fp_zero>
 2a8:	0e f4       	brtc	.+2      	; 0x2ac <__addsf3x+0x20>
 2aa:	e0 95       	com	r30
 2ac:	0b 2e       	mov	r0, r27
 2ae:	ba 2f       	mov	r27, r26
 2b0:	a0 2d       	mov	r26, r0
 2b2:	0b 01       	movw	r0, r22
 2b4:	b9 01       	movw	r22, r18
 2b6:	90 01       	movw	r18, r0
 2b8:	0c 01       	movw	r0, r24
 2ba:	ca 01       	movw	r24, r20
 2bc:	a0 01       	movw	r20, r0
 2be:	11 24       	eor	r1, r1
 2c0:	ff 27       	eor	r31, r31
 2c2:	59 1b       	sub	r21, r25
 2c4:	99 f0       	breq	.+38     	; 0x2ec <__addsf3x+0x60>
 2c6:	59 3f       	cpi	r21, 0xF9	; 249
 2c8:	50 f4       	brcc	.+20     	; 0x2de <__addsf3x+0x52>
 2ca:	50 3e       	cpi	r21, 0xE0	; 224
 2cc:	68 f1       	brcs	.+90     	; 0x328 <__addsf3x+0x9c>
 2ce:	1a 16       	cp	r1, r26
 2d0:	f0 40       	sbci	r31, 0x00	; 0
 2d2:	a2 2f       	mov	r26, r18
 2d4:	23 2f       	mov	r18, r19
 2d6:	34 2f       	mov	r19, r20
 2d8:	44 27       	eor	r20, r20
 2da:	58 5f       	subi	r21, 0xF8	; 248
 2dc:	f3 cf       	rjmp	.-26     	; 0x2c4 <__addsf3x+0x38>
 2de:	46 95       	lsr	r20
 2e0:	37 95       	ror	r19
 2e2:	27 95       	ror	r18
 2e4:	a7 95       	ror	r26
 2e6:	f0 40       	sbci	r31, 0x00	; 0
 2e8:	53 95       	inc	r21
 2ea:	c9 f7       	brne	.-14     	; 0x2de <__addsf3x+0x52>
 2ec:	7e f4       	brtc	.+30     	; 0x30c <__addsf3x+0x80>
 2ee:	1f 16       	cp	r1, r31
 2f0:	ba 0b       	sbc	r27, r26
 2f2:	62 0b       	sbc	r22, r18
 2f4:	73 0b       	sbc	r23, r19
 2f6:	84 0b       	sbc	r24, r20
 2f8:	ba f0       	brmi	.+46     	; 0x328 <__addsf3x+0x9c>
 2fa:	91 50       	subi	r25, 0x01	; 1
 2fc:	a1 f0       	breq	.+40     	; 0x326 <__addsf3x+0x9a>
 2fe:	ff 0f       	add	r31, r31
 300:	bb 1f       	adc	r27, r27
 302:	66 1f       	adc	r22, r22
 304:	77 1f       	adc	r23, r23
 306:	88 1f       	adc	r24, r24
 308:	c2 f7       	brpl	.-16     	; 0x2fa <__addsf3x+0x6e>
 30a:	0e c0       	rjmp	.+28     	; 0x328 <__addsf3x+0x9c>
 30c:	ba 0f       	add	r27, r26
 30e:	62 1f       	adc	r22, r18
 310:	73 1f       	adc	r23, r19
 312:	84 1f       	adc	r24, r20
 314:	48 f4       	brcc	.+18     	; 0x328 <__addsf3x+0x9c>
 316:	87 95       	ror	r24
 318:	77 95       	ror	r23
 31a:	67 95       	ror	r22
 31c:	b7 95       	ror	r27
 31e:	f7 95       	ror	r31
 320:	9e 3f       	cpi	r25, 0xFE	; 254
 322:	08 f0       	brcs	.+2      	; 0x326 <__addsf3x+0x9a>
 324:	b0 cf       	rjmp	.-160    	; 0x286 <__addsf3+0x28>
 326:	93 95       	inc	r25
 328:	88 0f       	add	r24, r24
 32a:	08 f0       	brcs	.+2      	; 0x32e <__addsf3x+0xa2>
 32c:	99 27       	eor	r25, r25
 32e:	ee 0f       	add	r30, r30
 330:	97 95       	ror	r25
 332:	87 95       	ror	r24
 334:	08 95       	ret

00000336 <__cmpsf2>:
 336:	0e 94 d6 01 	call	0x3ac	; 0x3ac <__fp_cmp>
 33a:	08 f4       	brcc	.+2      	; 0x33e <__cmpsf2+0x8>
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	08 95       	ret

00000340 <__fixsfsi>:
 340:	0e 94 a7 01 	call	0x34e	; 0x34e <__fixunssfsi>
 344:	68 94       	set
 346:	b1 11       	cpse	r27, r1
 348:	0c 94 45 02 	jmp	0x48a	; 0x48a <__fp_szero>
 34c:	08 95       	ret

0000034e <__fixunssfsi>:
 34e:	0e 94 2a 02 	call	0x454	; 0x454 <__fp_splitA>
 352:	88 f0       	brcs	.+34     	; 0x376 <__fixunssfsi+0x28>
 354:	9f 57       	subi	r25, 0x7F	; 127
 356:	98 f0       	brcs	.+38     	; 0x37e <__fixunssfsi+0x30>
 358:	b9 2f       	mov	r27, r25
 35a:	99 27       	eor	r25, r25
 35c:	b7 51       	subi	r27, 0x17	; 23
 35e:	b0 f0       	brcs	.+44     	; 0x38c <__fixunssfsi+0x3e>
 360:	e1 f0       	breq	.+56     	; 0x39a <__fixunssfsi+0x4c>
 362:	66 0f       	add	r22, r22
 364:	77 1f       	adc	r23, r23
 366:	88 1f       	adc	r24, r24
 368:	99 1f       	adc	r25, r25
 36a:	1a f0       	brmi	.+6      	; 0x372 <__fixunssfsi+0x24>
 36c:	ba 95       	dec	r27
 36e:	c9 f7       	brne	.-14     	; 0x362 <__fixunssfsi+0x14>
 370:	14 c0       	rjmp	.+40     	; 0x39a <__fixunssfsi+0x4c>
 372:	b1 30       	cpi	r27, 0x01	; 1
 374:	91 f0       	breq	.+36     	; 0x39a <__fixunssfsi+0x4c>
 376:	0e 94 44 02 	call	0x488	; 0x488 <__fp_zero>
 37a:	b1 e0       	ldi	r27, 0x01	; 1
 37c:	08 95       	ret
 37e:	0c 94 44 02 	jmp	0x488	; 0x488 <__fp_zero>
 382:	67 2f       	mov	r22, r23
 384:	78 2f       	mov	r23, r24
 386:	88 27       	eor	r24, r24
 388:	b8 5f       	subi	r27, 0xF8	; 248
 38a:	39 f0       	breq	.+14     	; 0x39a <__fixunssfsi+0x4c>
 38c:	b9 3f       	cpi	r27, 0xF9	; 249
 38e:	cc f3       	brlt	.-14     	; 0x382 <__fixunssfsi+0x34>
 390:	86 95       	lsr	r24
 392:	77 95       	ror	r23
 394:	67 95       	ror	r22
 396:	b3 95       	inc	r27
 398:	d9 f7       	brne	.-10     	; 0x390 <__fixunssfsi+0x42>
 39a:	3e f4       	brtc	.+14     	; 0x3aa <__fixunssfsi+0x5c>
 39c:	90 95       	com	r25
 39e:	80 95       	com	r24
 3a0:	70 95       	com	r23
 3a2:	61 95       	neg	r22
 3a4:	7f 4f       	sbci	r23, 0xFF	; 255
 3a6:	8f 4f       	sbci	r24, 0xFF	; 255
 3a8:	9f 4f       	sbci	r25, 0xFF	; 255
 3aa:	08 95       	ret

000003ac <__fp_cmp>:
 3ac:	99 0f       	add	r25, r25
 3ae:	00 08       	sbc	r0, r0
 3b0:	55 0f       	add	r21, r21
 3b2:	aa 0b       	sbc	r26, r26
 3b4:	e0 e8       	ldi	r30, 0x80	; 128
 3b6:	fe ef       	ldi	r31, 0xFE	; 254
 3b8:	16 16       	cp	r1, r22
 3ba:	17 06       	cpc	r1, r23
 3bc:	e8 07       	cpc	r30, r24
 3be:	f9 07       	cpc	r31, r25
 3c0:	c0 f0       	brcs	.+48     	; 0x3f2 <__fp_cmp+0x46>
 3c2:	12 16       	cp	r1, r18
 3c4:	13 06       	cpc	r1, r19
 3c6:	e4 07       	cpc	r30, r20
 3c8:	f5 07       	cpc	r31, r21
 3ca:	98 f0       	brcs	.+38     	; 0x3f2 <__fp_cmp+0x46>
 3cc:	62 1b       	sub	r22, r18
 3ce:	73 0b       	sbc	r23, r19
 3d0:	84 0b       	sbc	r24, r20
 3d2:	95 0b       	sbc	r25, r21
 3d4:	39 f4       	brne	.+14     	; 0x3e4 <__fp_cmp+0x38>
 3d6:	0a 26       	eor	r0, r26
 3d8:	61 f0       	breq	.+24     	; 0x3f2 <__fp_cmp+0x46>
 3da:	23 2b       	or	r18, r19
 3dc:	24 2b       	or	r18, r20
 3de:	25 2b       	or	r18, r21
 3e0:	21 f4       	brne	.+8      	; 0x3ea <__fp_cmp+0x3e>
 3e2:	08 95       	ret
 3e4:	0a 26       	eor	r0, r26
 3e6:	09 f4       	brne	.+2      	; 0x3ea <__fp_cmp+0x3e>
 3e8:	a1 40       	sbci	r26, 0x01	; 1
 3ea:	a6 95       	lsr	r26
 3ec:	8f ef       	ldi	r24, 0xFF	; 255
 3ee:	81 1d       	adc	r24, r1
 3f0:	81 1d       	adc	r24, r1
 3f2:	08 95       	ret

000003f4 <__fp_inf>:
 3f4:	97 f9       	bld	r25, 7
 3f6:	9f 67       	ori	r25, 0x7F	; 127
 3f8:	80 e8       	ldi	r24, 0x80	; 128
 3fa:	70 e0       	ldi	r23, 0x00	; 0
 3fc:	60 e0       	ldi	r22, 0x00	; 0
 3fe:	08 95       	ret

00000400 <__fp_nan>:
 400:	9f ef       	ldi	r25, 0xFF	; 255
 402:	80 ec       	ldi	r24, 0xC0	; 192
 404:	08 95       	ret

00000406 <__fp_pscA>:
 406:	00 24       	eor	r0, r0
 408:	0a 94       	dec	r0
 40a:	16 16       	cp	r1, r22
 40c:	17 06       	cpc	r1, r23
 40e:	18 06       	cpc	r1, r24
 410:	09 06       	cpc	r0, r25
 412:	08 95       	ret

00000414 <__fp_pscB>:
 414:	00 24       	eor	r0, r0
 416:	0a 94       	dec	r0
 418:	12 16       	cp	r1, r18
 41a:	13 06       	cpc	r1, r19
 41c:	14 06       	cpc	r1, r20
 41e:	05 06       	cpc	r0, r21
 420:	08 95       	ret

00000422 <__fp_round>:
 422:	09 2e       	mov	r0, r25
 424:	03 94       	inc	r0
 426:	00 0c       	add	r0, r0
 428:	11 f4       	brne	.+4      	; 0x42e <__fp_round+0xc>
 42a:	88 23       	and	r24, r24
 42c:	52 f0       	brmi	.+20     	; 0x442 <__fp_round+0x20>
 42e:	bb 0f       	add	r27, r27
 430:	40 f4       	brcc	.+16     	; 0x442 <__fp_round+0x20>
 432:	bf 2b       	or	r27, r31
 434:	11 f4       	brne	.+4      	; 0x43a <__fp_round+0x18>
 436:	60 ff       	sbrs	r22, 0
 438:	04 c0       	rjmp	.+8      	; 0x442 <__fp_round+0x20>
 43a:	6f 5f       	subi	r22, 0xFF	; 255
 43c:	7f 4f       	sbci	r23, 0xFF	; 255
 43e:	8f 4f       	sbci	r24, 0xFF	; 255
 440:	9f 4f       	sbci	r25, 0xFF	; 255
 442:	08 95       	ret

00000444 <__fp_split3>:
 444:	57 fd       	sbrc	r21, 7
 446:	90 58       	subi	r25, 0x80	; 128
 448:	44 0f       	add	r20, r20
 44a:	55 1f       	adc	r21, r21
 44c:	59 f0       	breq	.+22     	; 0x464 <__fp_splitA+0x10>
 44e:	5f 3f       	cpi	r21, 0xFF	; 255
 450:	71 f0       	breq	.+28     	; 0x46e <__fp_splitA+0x1a>
 452:	47 95       	ror	r20

00000454 <__fp_splitA>:
 454:	88 0f       	add	r24, r24
 456:	97 fb       	bst	r25, 7
 458:	99 1f       	adc	r25, r25
 45a:	61 f0       	breq	.+24     	; 0x474 <__fp_splitA+0x20>
 45c:	9f 3f       	cpi	r25, 0xFF	; 255
 45e:	79 f0       	breq	.+30     	; 0x47e <__fp_splitA+0x2a>
 460:	87 95       	ror	r24
 462:	08 95       	ret
 464:	12 16       	cp	r1, r18
 466:	13 06       	cpc	r1, r19
 468:	14 06       	cpc	r1, r20
 46a:	55 1f       	adc	r21, r21
 46c:	f2 cf       	rjmp	.-28     	; 0x452 <__fp_split3+0xe>
 46e:	46 95       	lsr	r20
 470:	f1 df       	rcall	.-30     	; 0x454 <__fp_splitA>
 472:	08 c0       	rjmp	.+16     	; 0x484 <__fp_splitA+0x30>
 474:	16 16       	cp	r1, r22
 476:	17 06       	cpc	r1, r23
 478:	18 06       	cpc	r1, r24
 47a:	99 1f       	adc	r25, r25
 47c:	f1 cf       	rjmp	.-30     	; 0x460 <__fp_splitA+0xc>
 47e:	86 95       	lsr	r24
 480:	71 05       	cpc	r23, r1
 482:	61 05       	cpc	r22, r1
 484:	08 94       	sec
 486:	08 95       	ret

00000488 <__fp_zero>:
 488:	e8 94       	clt

0000048a <__fp_szero>:
 48a:	bb 27       	eor	r27, r27
 48c:	66 27       	eor	r22, r22
 48e:	77 27       	eor	r23, r23
 490:	cb 01       	movw	r24, r22
 492:	97 f9       	bld	r25, 7
 494:	08 95       	ret

00000496 <__gesf2>:
 496:	0e 94 d6 01 	call	0x3ac	; 0x3ac <__fp_cmp>
 49a:	08 f4       	brcc	.+2      	; 0x49e <__gesf2+0x8>
 49c:	8f ef       	ldi	r24, 0xFF	; 255
 49e:	08 95       	ret

000004a0 <__mulsf3>:
 4a0:	0e 94 63 02 	call	0x4c6	; 0x4c6 <__mulsf3x>
 4a4:	0c 94 11 02 	jmp	0x422	; 0x422 <__fp_round>
 4a8:	0e 94 03 02 	call	0x406	; 0x406 <__fp_pscA>
 4ac:	38 f0       	brcs	.+14     	; 0x4bc <__mulsf3+0x1c>
 4ae:	0e 94 0a 02 	call	0x414	; 0x414 <__fp_pscB>
 4b2:	20 f0       	brcs	.+8      	; 0x4bc <__mulsf3+0x1c>
 4b4:	95 23       	and	r25, r21
 4b6:	11 f0       	breq	.+4      	; 0x4bc <__mulsf3+0x1c>
 4b8:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <__fp_inf>
 4bc:	0c 94 00 02 	jmp	0x400	; 0x400 <__fp_nan>
 4c0:	11 24       	eor	r1, r1
 4c2:	0c 94 45 02 	jmp	0x48a	; 0x48a <__fp_szero>

000004c6 <__mulsf3x>:
 4c6:	0e 94 22 02 	call	0x444	; 0x444 <__fp_split3>
 4ca:	70 f3       	brcs	.-36     	; 0x4a8 <__mulsf3+0x8>

000004cc <__mulsf3_pse>:
 4cc:	95 9f       	mul	r25, r21
 4ce:	c1 f3       	breq	.-16     	; 0x4c0 <__mulsf3+0x20>
 4d0:	95 0f       	add	r25, r21
 4d2:	50 e0       	ldi	r21, 0x00	; 0
 4d4:	55 1f       	adc	r21, r21
 4d6:	62 9f       	mul	r22, r18
 4d8:	f0 01       	movw	r30, r0
 4da:	72 9f       	mul	r23, r18
 4dc:	bb 27       	eor	r27, r27
 4de:	f0 0d       	add	r31, r0
 4e0:	b1 1d       	adc	r27, r1
 4e2:	63 9f       	mul	r22, r19
 4e4:	aa 27       	eor	r26, r26
 4e6:	f0 0d       	add	r31, r0
 4e8:	b1 1d       	adc	r27, r1
 4ea:	aa 1f       	adc	r26, r26
 4ec:	64 9f       	mul	r22, r20
 4ee:	66 27       	eor	r22, r22
 4f0:	b0 0d       	add	r27, r0
 4f2:	a1 1d       	adc	r26, r1
 4f4:	66 1f       	adc	r22, r22
 4f6:	82 9f       	mul	r24, r18
 4f8:	22 27       	eor	r18, r18
 4fa:	b0 0d       	add	r27, r0
 4fc:	a1 1d       	adc	r26, r1
 4fe:	62 1f       	adc	r22, r18
 500:	73 9f       	mul	r23, r19
 502:	b0 0d       	add	r27, r0
 504:	a1 1d       	adc	r26, r1
 506:	62 1f       	adc	r22, r18
 508:	83 9f       	mul	r24, r19
 50a:	a0 0d       	add	r26, r0
 50c:	61 1d       	adc	r22, r1
 50e:	22 1f       	adc	r18, r18
 510:	74 9f       	mul	r23, r20
 512:	33 27       	eor	r19, r19
 514:	a0 0d       	add	r26, r0
 516:	61 1d       	adc	r22, r1
 518:	23 1f       	adc	r18, r19
 51a:	84 9f       	mul	r24, r20
 51c:	60 0d       	add	r22, r0
 51e:	21 1d       	adc	r18, r1
 520:	82 2f       	mov	r24, r18
 522:	76 2f       	mov	r23, r22
 524:	6a 2f       	mov	r22, r26
 526:	11 24       	eor	r1, r1
 528:	9f 57       	subi	r25, 0x7F	; 127
 52a:	50 40       	sbci	r21, 0x00	; 0
 52c:	9a f0       	brmi	.+38     	; 0x554 <__mulsf3_pse+0x88>
 52e:	f1 f0       	breq	.+60     	; 0x56c <__mulsf3_pse+0xa0>
 530:	88 23       	and	r24, r24
 532:	4a f0       	brmi	.+18     	; 0x546 <__mulsf3_pse+0x7a>
 534:	ee 0f       	add	r30, r30
 536:	ff 1f       	adc	r31, r31
 538:	bb 1f       	adc	r27, r27
 53a:	66 1f       	adc	r22, r22
 53c:	77 1f       	adc	r23, r23
 53e:	88 1f       	adc	r24, r24
 540:	91 50       	subi	r25, 0x01	; 1
 542:	50 40       	sbci	r21, 0x00	; 0
 544:	a9 f7       	brne	.-22     	; 0x530 <__mulsf3_pse+0x64>
 546:	9e 3f       	cpi	r25, 0xFE	; 254
 548:	51 05       	cpc	r21, r1
 54a:	80 f0       	brcs	.+32     	; 0x56c <__mulsf3_pse+0xa0>
 54c:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <__fp_inf>
 550:	0c 94 45 02 	jmp	0x48a	; 0x48a <__fp_szero>
 554:	5f 3f       	cpi	r21, 0xFF	; 255
 556:	e4 f3       	brlt	.-8      	; 0x550 <__mulsf3_pse+0x84>
 558:	98 3e       	cpi	r25, 0xE8	; 232
 55a:	d4 f3       	brlt	.-12     	; 0x550 <__mulsf3_pse+0x84>
 55c:	86 95       	lsr	r24
 55e:	77 95       	ror	r23
 560:	67 95       	ror	r22
 562:	b7 95       	ror	r27
 564:	f7 95       	ror	r31
 566:	e7 95       	ror	r30
 568:	9f 5f       	subi	r25, 0xFF	; 255
 56a:	c1 f7       	brne	.-16     	; 0x55c <__mulsf3_pse+0x90>
 56c:	fe 2b       	or	r31, r30
 56e:	88 0f       	add	r24, r24
 570:	91 1d       	adc	r25, r1
 572:	96 95       	lsr	r25
 574:	87 95       	ror	r24
 576:	97 f9       	bld	r25, 7
 578:	08 95       	ret

0000057a <sin>:
 57a:	9f 93       	push	r25
 57c:	0e 94 c7 02 	call	0x58e	; 0x58e <__fp_rempio2>
 580:	0f 90       	pop	r0
 582:	07 fc       	sbrc	r0, 7
 584:	ee 5f       	subi	r30, 0xFE	; 254
 586:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__fp_sinus>
 58a:	0c 94 00 02 	jmp	0x400	; 0x400 <__fp_nan>

0000058e <__fp_rempio2>:
 58e:	0e 94 2a 02 	call	0x454	; 0x454 <__fp_splitA>
 592:	d8 f3       	brcs	.-10     	; 0x58a <sin+0x10>
 594:	e8 94       	clt
 596:	e0 e0       	ldi	r30, 0x00	; 0
 598:	bb 27       	eor	r27, r27
 59a:	9f 57       	subi	r25, 0x7F	; 127
 59c:	f0 f0       	brcs	.+60     	; 0x5da <__fp_rempio2+0x4c>
 59e:	2a ed       	ldi	r18, 0xDA	; 218
 5a0:	3f e0       	ldi	r19, 0x0F	; 15
 5a2:	49 ec       	ldi	r20, 0xC9	; 201
 5a4:	06 c0       	rjmp	.+12     	; 0x5b2 <__fp_rempio2+0x24>
 5a6:	ee 0f       	add	r30, r30
 5a8:	bb 0f       	add	r27, r27
 5aa:	66 1f       	adc	r22, r22
 5ac:	77 1f       	adc	r23, r23
 5ae:	88 1f       	adc	r24, r24
 5b0:	28 f0       	brcs	.+10     	; 0x5bc <__fp_rempio2+0x2e>
 5b2:	b2 3a       	cpi	r27, 0xA2	; 162
 5b4:	62 07       	cpc	r22, r18
 5b6:	73 07       	cpc	r23, r19
 5b8:	84 07       	cpc	r24, r20
 5ba:	28 f0       	brcs	.+10     	; 0x5c6 <__fp_rempio2+0x38>
 5bc:	b2 5a       	subi	r27, 0xA2	; 162
 5be:	62 0b       	sbc	r22, r18
 5c0:	73 0b       	sbc	r23, r19
 5c2:	84 0b       	sbc	r24, r20
 5c4:	e3 95       	inc	r30
 5c6:	9a 95       	dec	r25
 5c8:	72 f7       	brpl	.-36     	; 0x5a6 <__fp_rempio2+0x18>
 5ca:	80 38       	cpi	r24, 0x80	; 128
 5cc:	30 f4       	brcc	.+12     	; 0x5da <__fp_rempio2+0x4c>
 5ce:	9a 95       	dec	r25
 5d0:	bb 0f       	add	r27, r27
 5d2:	66 1f       	adc	r22, r22
 5d4:	77 1f       	adc	r23, r23
 5d6:	88 1f       	adc	r24, r24
 5d8:	d2 f7       	brpl	.-12     	; 0x5ce <__fp_rempio2+0x40>
 5da:	90 48       	sbci	r25, 0x80	; 128
 5dc:	0c 94 06 03 	jmp	0x60c	; 0x60c <__fp_mpack_finite>

000005e0 <__fp_sinus>:
 5e0:	ef 93       	push	r30
 5e2:	e0 ff       	sbrs	r30, 0
 5e4:	07 c0       	rjmp	.+14     	; 0x5f4 <__fp_sinus+0x14>
 5e6:	a2 ea       	ldi	r26, 0xA2	; 162
 5e8:	2a ed       	ldi	r18, 0xDA	; 218
 5ea:	3f e0       	ldi	r19, 0x0F	; 15
 5ec:	49 ec       	ldi	r20, 0xC9	; 201
 5ee:	5f eb       	ldi	r21, 0xBF	; 191
 5f0:	0e 94 46 01 	call	0x28c	; 0x28c <__addsf3x>
 5f4:	0e 94 11 02 	call	0x422	; 0x422 <__fp_round>
 5f8:	0f 90       	pop	r0
 5fa:	03 94       	inc	r0
 5fc:	01 fc       	sbrc	r0, 1
 5fe:	90 58       	subi	r25, 0x80	; 128
 600:	e8 e6       	ldi	r30, 0x68	; 104
 602:	f0 e0       	ldi	r31, 0x00	; 0
 604:	0c 94 12 03 	jmp	0x624	; 0x624 <__fp_powsodd>

00000608 <__fp_mpack>:
 608:	9f 3f       	cpi	r25, 0xFF	; 255
 60a:	31 f0       	breq	.+12     	; 0x618 <__fp_mpack_finite+0xc>

0000060c <__fp_mpack_finite>:
 60c:	91 50       	subi	r25, 0x01	; 1
 60e:	20 f4       	brcc	.+8      	; 0x618 <__fp_mpack_finite+0xc>
 610:	87 95       	ror	r24
 612:	77 95       	ror	r23
 614:	67 95       	ror	r22
 616:	b7 95       	ror	r27
 618:	88 0f       	add	r24, r24
 61a:	91 1d       	adc	r25, r1
 61c:	96 95       	lsr	r25
 61e:	87 95       	ror	r24
 620:	97 f9       	bld	r25, 7
 622:	08 95       	ret

00000624 <__fp_powsodd>:
 624:	9f 93       	push	r25
 626:	8f 93       	push	r24
 628:	7f 93       	push	r23
 62a:	6f 93       	push	r22
 62c:	ff 93       	push	r31
 62e:	ef 93       	push	r30
 630:	9b 01       	movw	r18, r22
 632:	ac 01       	movw	r20, r24
 634:	0e 94 50 02 	call	0x4a0	; 0x4a0 <__mulsf3>
 638:	ef 91       	pop	r30
 63a:	ff 91       	pop	r31
 63c:	0e 94 26 03 	call	0x64c	; 0x64c <__fp_powser>
 640:	2f 91       	pop	r18
 642:	3f 91       	pop	r19
 644:	4f 91       	pop	r20
 646:	5f 91       	pop	r21
 648:	0c 94 50 02 	jmp	0x4a0	; 0x4a0 <__mulsf3>

0000064c <__fp_powser>:
 64c:	df 93       	push	r29
 64e:	cf 93       	push	r28
 650:	1f 93       	push	r17
 652:	0f 93       	push	r16
 654:	ff 92       	push	r15
 656:	ef 92       	push	r14
 658:	df 92       	push	r13
 65a:	7b 01       	movw	r14, r22
 65c:	8c 01       	movw	r16, r24
 65e:	68 94       	set
 660:	06 c0       	rjmp	.+12     	; 0x66e <__fp_powser+0x22>
 662:	da 2e       	mov	r13, r26
 664:	ef 01       	movw	r28, r30
 666:	0e 94 63 02 	call	0x4c6	; 0x4c6 <__mulsf3x>
 66a:	fe 01       	movw	r30, r28
 66c:	e8 94       	clt
 66e:	a5 91       	lpm	r26, Z+
 670:	25 91       	lpm	r18, Z+
 672:	35 91       	lpm	r19, Z+
 674:	45 91       	lpm	r20, Z+
 676:	55 91       	lpm	r21, Z+
 678:	a6 f3       	brts	.-24     	; 0x662 <__fp_powser+0x16>
 67a:	ef 01       	movw	r28, r30
 67c:	0e 94 46 01 	call	0x28c	; 0x28c <__addsf3x>
 680:	fe 01       	movw	r30, r28
 682:	97 01       	movw	r18, r14
 684:	a8 01       	movw	r20, r16
 686:	da 94       	dec	r13
 688:	69 f7       	brne	.-38     	; 0x664 <__fp_powser+0x18>
 68a:	df 90       	pop	r13
 68c:	ef 90       	pop	r14
 68e:	ff 90       	pop	r15
 690:	0f 91       	pop	r16
 692:	1f 91       	pop	r17
 694:	cf 91       	pop	r28
 696:	df 91       	pop	r29
 698:	08 95       	ret

0000069a <_exit>:
 69a:	f8 94       	cli

0000069c <__stop_program>:
 69c:	ff cf       	rjmp	.-2      	; 0x69c <__stop_program>
