
Atividade17.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000248  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000772  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006bf  00000000  00000000  00000a2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c4  00000000  00000000  000010e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000013b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000380  00000000  00000000  00001404  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000110  00000000  00000000  00001784  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001894  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  78:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <ADC_Conversion>:
#define F_CPU 16000000
#define PI 3.14259265
#include <util/delay.h>
int ADC_Conversion(int A_i){
	int adcOut;
	if (A_i == 1) ADMUX |= (1<<MUX0);
  80:	01 97       	sbiw	r24, 0x01	; 1
  82:	31 f4       	brne	.+12     	; 0x90 <ADC_Conversion+0x10>
  84:	ec e7       	ldi	r30, 0x7C	; 124
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	80 81       	ld	r24, Z
  8a:	81 60       	ori	r24, 0x01	; 1
  8c:	80 83       	st	Z, r24
  8e:	05 c0       	rjmp	.+10     	; 0x9a <ADC_Conversion+0x1a>
	else ADMUX &= ~(1<<MUX0);
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	8e 7f       	andi	r24, 0xFE	; 254
  98:	80 83       	st	Z, r24
		
	// Start conversion by setting ADSC in ADCSRA Register
	ADCSRA |= (1<<ADSC);
  9a:	ea e7       	ldi	r30, 0x7A	; 122
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	80 64       	ori	r24, 0x40	; 64
  a2:	80 83       	st	Z, r24
	// wait until conversion complete ADSC=0 -> Complete
	while (ADCSRA & (1<<ADSC));
  a4:	80 81       	ld	r24, Z
  a6:	86 fd       	sbrc	r24, 6
  a8:	fd cf       	rjmp	.-6      	; 0xa4 <ADC_Conversion+0x24>
	adcOut = ADCH;
  aa:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	//adcOut = adcOut<< 2;
	//adcOut |= ADCL;
	return adcOut;
	
}
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	08 95       	ret

000000b2 <ADC_init>:
void ADC_init(){
	  // Set ADCSRA Register in ATMega168
	  ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
  b2:	87 e8       	ldi	r24, 0x87	; 135
  b4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	  // Set ADMUX Register in ATMega168
	  ADMUX = (1<<REFS0) | (1<<ADLAR);	
  b8:	80 e6       	ldi	r24, 0x60	; 96
  ba:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
  be:	08 95       	ret

000000c0 <main>:
#define F_CPU 16000000
#include <util/delay.h>
#include "Atividade17.h"

int main(void)
{
  c0:	cf 93       	push	r28
  c2:	df 93       	push	r29
  c4:	00 d0       	rcall	.+0      	; 0xc6 <main+0x6>
  c6:	cd b7       	in	r28, 0x3d	; 61
  c8:	de b7       	in	r29, 0x3e	; 62
	// set all PORTD,and some PORTB pins for output. Also PORTB2 for input
	DDRD = 0xFF;
  ca:	8f ef       	ldi	r24, 0xFF	; 255
  cc:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF;
  ce:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1 << DDB2);
  d0:	22 98       	cbi	0x04, 2	; 4

	// clear everything and pull up for DDB2
	PORTD = 0x00;
  d2:	1b b8       	out	0x0b, r1	; 11
	PORTB =  (1 << PORTB2);
  d4:	84 e0       	ldi	r24, 0x04	; 4
  d6:	85 b9       	out	0x05, r24	; 5
	ADC_init();
  d8:	0e 94 59 00 	call	0xb2	; 0xb2 <ADC_init>
					S+= (A_0 - A_1);
				}
						
			 
			}
			S /=255;
  dc:	ee 24       	eor	r14, r14
  de:	ea 94       	dec	r14
  e0:	f1 2c       	mov	r15, r1
	while (1)
	{
		 
		uint8_t j = PINB;
		j &= 0b00000100;
		if (j==0b00000100 ){ // if PORTB2 receber sinal
  e2:	1a 9b       	sbis	0x03, 2	; 3
  e4:	42 c0       	rjmp	.+132    	; 0x16a <main+0xaa>
			
			S = 0;
  e6:	1a 82       	std	Y+2, r1	; 0x02
  e8:	19 82       	std	Y+1, r1	; 0x01
  ea:	0f 2e       	mov	r0, r31
  ec:	f7 ec       	ldi	r31, 0xC7	; 199
  ee:	df 2e       	mov	r13, r31
  f0:	f0 2d       	mov	r31, r0
			for (uint8_t i =0; i < 199; i++){			
				int A_0 = ADC_Conversion(0);
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	0e 94 40 00 	call	0x80	; 0x80 <ADC_Conversion>
  fa:	8c 01       	movw	r16, r24
				int A_1 = ADC_Conversion(1);
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	0e 94 40 00 	call	0x80	; 0x80 <ADC_Conversion>
				if (A_1 > A_0){
 104:	08 17       	cp	r16, r24
 106:	19 07       	cpc	r17, r25
 108:	4c f4       	brge	.+18     	; 0x11c <main+0x5c>
					S += (A_1 - A_0);
 10a:	29 81       	ldd	r18, Y+1	; 0x01
 10c:	3a 81       	ldd	r19, Y+2	; 0x02
 10e:	80 1b       	sub	r24, r16
 110:	91 0b       	sbc	r25, r17
 112:	82 0f       	add	r24, r18
 114:	93 1f       	adc	r25, r19
 116:	9a 83       	std	Y+2, r25	; 0x02
 118:	89 83       	std	Y+1, r24	; 0x01
 11a:	08 c0       	rjmp	.+16     	; 0x12c <main+0x6c>
				}
				else {
					S+= (A_0 - A_1);
 11c:	29 81       	ldd	r18, Y+1	; 0x01
 11e:	3a 81       	ldd	r19, Y+2	; 0x02
 120:	08 1b       	sub	r16, r24
 122:	19 0b       	sbc	r17, r25
 124:	02 0f       	add	r16, r18
 126:	13 1f       	adc	r17, r19
 128:	1a 83       	std	Y+2, r17	; 0x02
 12a:	09 83       	std	Y+1, r16	; 0x01
 12c:	da 94       	dec	r13
		uint8_t j = PINB;
		j &= 0b00000100;
		if (j==0b00000100 ){ // if PORTB2 receber sinal
			
			S = 0;
			for (uint8_t i =0; i < 199; i++){			
 12e:	d1 10       	cpse	r13, r1
 130:	e0 cf       	rjmp	.-64     	; 0xf2 <main+0x32>
					S+= (A_0 - A_1);
				}
						
			 
			}
			S /=255;
 132:	89 81       	ldd	r24, Y+1	; 0x01
 134:	9a 81       	ldd	r25, Y+2	; 0x02
 136:	b7 01       	movw	r22, r14
 138:	0e 94 b8 00 	call	0x170	; 0x170 <__divmodhi4>
 13c:	7a 83       	std	Y+2, r23	; 0x02
 13e:	69 83       	std	Y+1, r22	; 0x01
			PORTD = (S & 0b0000000000111111)<<2 ; // SHIFT RIGHT Two bits to start from port 2
 140:	89 81       	ldd	r24, Y+1	; 0x01
 142:	9a 81       	ldd	r25, Y+2	; 0x02
 144:	88 0f       	add	r24, r24
 146:	99 1f       	adc	r25, r25
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	8b b9       	out	0x0b, r24	; 11
			PORTB = (S & 0b0000000011000000)>>6;
 14e:	89 81       	ldd	r24, Y+1	; 0x01
 150:	9a 81       	ldd	r25, Y+2	; 0x02
 152:	80 7c       	andi	r24, 0xC0	; 192
 154:	99 27       	eor	r25, r25
 156:	08 2e       	mov	r0, r24
 158:	89 2f       	mov	r24, r25
 15a:	00 0c       	add	r0, r0
 15c:	88 1f       	adc	r24, r24
 15e:	99 0b       	sbc	r25, r25
 160:	00 0c       	add	r0, r0
 162:	88 1f       	adc	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	85 b9       	out	0x05, r24	; 5
 168:	bc cf       	rjmp	.-136    	; 0xe2 <main+0x22>
		}
		else {
			PORTB = 0x00;
 16a:	15 b8       	out	0x05, r1	; 5
			PORTD = 0X00;
 16c:	1b b8       	out	0x0b, r1	; 11
 16e:	b9 cf       	rjmp	.-142    	; 0xe2 <main+0x22>

00000170 <__divmodhi4>:
 170:	97 fb       	bst	r25, 7
 172:	07 2e       	mov	r0, r23
 174:	16 f4       	brtc	.+4      	; 0x17a <__divmodhi4+0xa>
 176:	00 94       	com	r0
 178:	07 d0       	rcall	.+14     	; 0x188 <__divmodhi4_neg1>
 17a:	77 fd       	sbrc	r23, 7
 17c:	09 d0       	rcall	.+18     	; 0x190 <__divmodhi4_neg2>
 17e:	0e 94 cc 00 	call	0x198	; 0x198 <__udivmodhi4>
 182:	07 fc       	sbrc	r0, 7
 184:	05 d0       	rcall	.+10     	; 0x190 <__divmodhi4_neg2>
 186:	3e f4       	brtc	.+14     	; 0x196 <__divmodhi4_exit>

00000188 <__divmodhi4_neg1>:
 188:	90 95       	com	r25
 18a:	81 95       	neg	r24
 18c:	9f 4f       	sbci	r25, 0xFF	; 255
 18e:	08 95       	ret

00000190 <__divmodhi4_neg2>:
 190:	70 95       	com	r23
 192:	61 95       	neg	r22
 194:	7f 4f       	sbci	r23, 0xFF	; 255

00000196 <__divmodhi4_exit>:
 196:	08 95       	ret

00000198 <__udivmodhi4>:
 198:	aa 1b       	sub	r26, r26
 19a:	bb 1b       	sub	r27, r27
 19c:	51 e1       	ldi	r21, 0x11	; 17
 19e:	07 c0       	rjmp	.+14     	; 0x1ae <__udivmodhi4_ep>

000001a0 <__udivmodhi4_loop>:
 1a0:	aa 1f       	adc	r26, r26
 1a2:	bb 1f       	adc	r27, r27
 1a4:	a6 17       	cp	r26, r22
 1a6:	b7 07       	cpc	r27, r23
 1a8:	10 f0       	brcs	.+4      	; 0x1ae <__udivmodhi4_ep>
 1aa:	a6 1b       	sub	r26, r22
 1ac:	b7 0b       	sbc	r27, r23

000001ae <__udivmodhi4_ep>:
 1ae:	88 1f       	adc	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	5a 95       	dec	r21
 1b4:	a9 f7       	brne	.-22     	; 0x1a0 <__udivmodhi4_loop>
 1b6:	80 95       	com	r24
 1b8:	90 95       	com	r25
 1ba:	bc 01       	movw	r22, r24
 1bc:	cd 01       	movw	r24, r26
 1be:	08 95       	ret

000001c0 <_exit>:
 1c0:	f8 94       	cli

000001c2 <__stop_program>:
 1c2:	ff cf       	rjmp	.-2      	; 0x1c2 <__stop_program>
